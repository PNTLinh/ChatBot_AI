import streamlit as st
from components import render_header, render_answer
from langchain.embeddings import SentenceTransformerEmbeddings
from langchain.vectorstores import FAISS

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="TTHC RAG System",
    layout="wide",
)

# Header
render_header()

# 1) Form nh·∫≠p c√¢u h·ªèi
with st.form("query_form"):
    query = st.text_input("üîé Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n")
    submitted = st.form_submit_button("T√¨m ki·∫øm")

# D·ª´ng n·∫øu ch∆∞a submit ho·∫∑c query r·ªóng
if not submitted or not query:
    st.stop()

# 2) Lazy-load vectorstore t·ª´ disk
@st.cache_resource(ttl=86400)
def load_vectorstore():
    embed = SentenceTransformerEmbeddings(model_name="all-MiniLM-L6-v2")
    return FAISS.load_local(
        "data/faiss_store",
        embed,
        allow_dangerous_deserialization=True,
    )

# 3) T√¨m t√†i li·ªáu tham kh·∫£o
with st.spinner("T√¨m t√†i li·ªáu tham kh·∫£o‚Ä¶"):
    vs = load_vectorstore()
    docs = vs.similarity_search(query, k=3)

# 4) Hi·ªÉn th·ªã expander t√†i li·ªáu tham kh·∫£o
with st.expander("üìÑ T√†i li·ªáu tham kh·∫£o", expanded=False):
    for i, d in enumerate(docs, 1):
        snippet_preview = d.page_content[:200].strip().replace("\n", " ")
        st.markdown(f"**T√†i li·ªáu {i}:** {snippet_preview}‚Ä¶")
        if url := d.metadata.get("url"):
            st.markdown(f"[Ngu·ªìn]({url})")
        st.divider()

# 5) L·∫•y to√†n b·ªô n·ªôi dung c·ªßa doc th·ªèa m√£n query l√†m c√¢u tr·∫£ l·ªùi
with st.spinner("ƒêang tr√≠ch xu·∫•t c√¢u tr·∫£ l·ªùi‚Ä¶"):
    answer_parts = []
    q_lower = query.lower()
    for i, d in enumerate(docs, 1):
        content = d.page_content.strip()
        if q_lower in content.lower():
            # Th√™m to√†n b·ªô n·ªôi dung t√†i li·ªáu v√†o c√¢u tr·∫£ l·ªùi
            answer_parts.append(f"**Theo t√†i li·ªáu {i}:**\n{content}")
    if not answer_parts:
        answer = "Kh√¥ng t√¨m th·∫•y th√¥ng tin li√™n quan trong c√°c t√†i li·ªáu tham kh·∫£o."
    else:
        answer = "\n\n".join(answer_parts)

# 6) Hi·ªÉn th·ªã c√¢u tr·∫£ l·ªùi
render_answer(answer)
